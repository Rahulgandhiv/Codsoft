import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class Course {
    private String code;
    private String title;
    private String description;
    private int capacity;
    private List<String> schedule;
    private List<String> enrolledStudents;

    public Course(String code, String title, String description, int capacity, List<String> schedule) {
        this.code = code;
        this.title = title;
        this.description = description;
        this.capacity = capacity;
        this.schedule = schedule;
        this.enrolledStudents = new ArrayList<>();
    }

    public String getCode() {
        return code;
    }

    public String getTitle() {
        return title;
    }

    public String getDescription() {
        return description;
    }

    public int getCapacity() {
        return capacity;
    }

    public List<String> getSchedule() {
        return schedule;
    }

    public List<String> getEnrolledStudents() {
        return enrolledStudents;
    }

    public boolean addStudent(String studentId) {
        if (enrolledStudents.size() < capacity) {
            enrolledStudents.add(studentId);
            return true;
        }
        return false;
    }

    public boolean removeStudent(String studentId) {
        return enrolledStudents.remove(studentId);
    }
}

class Student {
    private String id;
    private String name;
    private List<Course> registeredCourses;

    public Student(String id, String name) {
        this.id = id;
        this.name = name;
        this.registeredCourses = new ArrayList<>();
    }

    public String getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    public List<Course> getRegisteredCourses() {
        return registeredCourses;
    }

    public boolean registerCourse(Course course) {
        if (course.addStudent(id)) {
            registeredCourses.add(course);
            return true;
        }
        return false;
    }

    public boolean dropCourse(Course course) {
        if (registeredCourses.remove(course)) {
            course.removeStudent(id);
            return true;
        }
        return false;
    }
}

public class CourseRegistrationSystem {
    private static List<Course> courses = new ArrayList<>();
    private static List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        initializeCourses();
        menu();
    }

    private static void initializeCourses() {
        // Initialize courses
        courses.add(new Course("CSCI101", "Introduction to Computer Science", "Basic computer science concepts", 50, List.of("Monday 10:00 AM")));
        courses.add(new Course("MATH201", "Calculus", "Introductory calculus course", 40, List.of("Tuesday 2:00 PM")));
    }

    private static void menu() {
        Scanner scanner = new Scanner(System.in);
        int choice;
        do {
            System.out.println("\nCourse Registration System Menu:");
            System.out.println("1. View Course Listing");
            System.out.println("2. Register Student");
            System.out.println("3. Drop Course");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = scanner.nextInt();
            switch (choice) {
                case 1:
                    displayCourseListing();
                    break;
                case 2:
                    registerStudent();
                    break;
                case 3:
                    dropCourse();
                    break;
                case 4:
                    System.out.println("Exiting...");
                    break;
                default:
                    System.out.println("Invalid choice. Please enter a number from 1 to 4.");
            }
        } while (choice != 4);
        scanner.close();
    }

    private static void displayCourseListing() {
        System.out.println("\nAvailable Courses:");
        for (Course course : courses) {
            int availableSlots = course.getCapacity() - course.getEnrolledStudents().size();
            System.out.println("Course Code: " + course.getCode());
            System.out.println("Title: " + course.getTitle());
            System.out.println("Description: " + course.getDescription());
            System.out.println("Available Slots: " + availableSlots + "/" + course.getCapacity());
            System.out.println("Schedule: " + course.getSchedule());
            System.out.println();
        }
    }

    private static void registerStudent() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("\nEnter Student ID: ");
        String id = scanner.next();
        System.out.print("Enter Student Name: ");
        String name = scanner.next();
        Student student = new Student(id, name);
        students.add(student);
        displayCourseListing();
        System.out.print("Enter Course Code to Register: ");
        String courseCode = scanner.next();
        Course course = findCourseByCode(courseCode);
        if (course != null) {
            if (student.registerCourse(course)) {
                System.out.println("Student " + name + " successfully registered for course " + courseCode);
            } else {
                System.out.println("Failed to register. No available slots for course " + courseCode);
            }
        } else {
            System.out.println("Course with code " + courseCode + " not found.");
        }
    }

    private static void dropCourse() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("\nEnter Student ID: ");
        String studentId = scanner.next();
        Student student = findStudentById(studentId);
        if (student != null) {
            System.out.println("Registered Courses for Student " + student.getName() + ":");
            List<Course> registeredCourses = student.getRegisteredCourses();
            if (registeredCourses.isEmpty()) {
                System.out.println("No registered courses for student " + student.getName());
            } else {
                for (Course course : registeredCourses) {
                    System.out.println("Course Code: " + course.getCode());
                    System.out.println("Title: " + course.getTitle());
                    System.out.println("Description: " + course.getDescription());
                    System.out.println();
                }
                System.out.print("Enter Course Code to Drop: ");
                String courseCode = scanner.next();
                Course course = findCourseByCode(courseCode);
                if (course != null) {
                    if (student.dropCourse(course)) {
                        System.out.println("Student successfully dropped course " + courseCode);
                    } else {
                        System.out.println("Student is not enrolled in course " + courseCode);
                    }
                } else {
                    System.out.println("Course with code " + courseCode + " not found.");
                }
            }
        } else {
            System.out.println("Student with ID " + studentId + " not found.");
        }
    }

    private static Course findCourseByCode(String code) {
        for (Course course : courses) {
            if (course.getCode().equals(code)) {
                return course;
            }
        }
        return null;
    }

    private static Student findStudentById(String id) {
        for (Student student : students) {
            if (student.getId().equals(id)) {
                return student;
            }
        }
        return null;
    }
}